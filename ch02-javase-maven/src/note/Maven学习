                                        第一章：Maven简介
1、传统开发项目的问题：
        （1）、很多模块，模块之间有关系，手工管理关系，比较繁琐
        （2）、需要很多第三方功能，需要很多jar包，需要手工去网络上获取各个jar包
        （3）、需要管理jar的版本，如： 你需要的是mysql5.1.5.jar,就不能用mysql4.40.0.jar
        （4）、管理jar文件之间的依赖，你的项目要使用a.jar需要使用b.jar里面的类--> 必须先获取到b.jar才可以，然后才能使用a.jar
                    a.jar需要b.jar  这个关系叫依赖
2、需要改进项目的开发和管理，需要maven
        （1）、  maven可以管理jar文件
        （2）、 自动下载jar和他的文档，源代码
        （3）、 管理jar直接的依赖。a.jar需要b.jar， maven会自动下载b.jar
        （4）、 管理你需要的jar版本
        （5）、 帮你编译程序，把java编译为class
        （6）、 帮你测试你的代码是否正确
        （7）、 帮你打包文件，形成jar文件或者war文件
        （8）、 帮你部署项目
3、构建：项目的构建
        构建：是面向过程的，就是一些步骤，完成项目代码的编译、测试、运行、打包、部署等等
        maven支持的构建包括有：
                1、清理：把之前项目编译的对象删除掉，为新的编译代码做准备
                2、编译：把程序源代码编译为执行代码，java-class
                        批量的，maven可以同时把成千上百的文件编译为class
                        javac不一样，一次只能编译一个文件
                3、测试：maven可以执行测试程序代码，验证你的功能是否正确
                        批量的，maven可以同时执行多个测试代码，同时测试很多功能
                4、报告：生成测试结果的文件，测试通过没有
                5、打包：把你的项目中所有的class文件，配置文件等所有资源放到一个压缩文件中
                        这个压缩文件就是项目的结果文件，通过java程序，压缩文件是jar扩展名的
                        对于web应用，压缩文件扩展名是.war
                6、安装：把5中生成的文件jar，war安装到本机仓库
                7、部署：把程序安装好可以执行
4、maven的核心概念：
        1、pom：一个文件  名称是pom.xml      pom翻译过来叫做项目对象模型
                maven把一个项目当作一个模型使用，控制maven构建项目的过程，管理jar依赖
        2、约定的目录结构：maven项目的目录和文件的位置都是规定的
        3、坐标：是一个唯一的字符串，用来表示资源的
        4、依赖管理：管理你的项目可以使用的jar文件
        5、仓库管理：资源存放的位置
        6、生命周期：maven工具构建项目的过程，就是生命周期
        7、插件和目标：执行maven构建的时候用的工具
        8、继承
        9、聚合
5、maven工具的安装和配置
        1、下载
        2、解压        子目录bin：执行程序，主要是：mvn.cmd
                      conf：maven工具本身的配置文件 settings.xml
        3、配置环境变量
                      在系统的环境变量中，指定一个M2-HOME的名称，指定他的值是maven工具安装目录，bin之前的目录
                      再把M2-HOME加入到Path中
                      验证：在ｃｍｄ中，执行mvn　－ｖ
                      Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)
                      Maven home: D:\SoftWare\maven\apache-maven-3.6.3\bin\..
                      Java version: 1.8.0_144, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk1.8.0_144\jre
                      Default locale: zh_CN, platform encoding: GBK
                      OS name: "windows 10", version: "10.0", arch: "amd64", family: "windows"
                      安装成功！


                                            第二章：Maven核心概念
1、maven约定的目录结构： 约定就是大家都遵循的一个原则
        每一个maven项目在磁盘中都是一个文件夹（项目-Hello）
        Hello/
            ---/src
            ------/main             放你的主程序java代码和配置文件
            ---------/java          你的程序包和包中的java文件
            ---------/resource      你的java程序中要使用的配置文件

            ------/test             放测试程序代码和文件
            ---------/java          测试程序包和包中的java文件
            ---------/resource      测试java程序中要使用的配置文件

            ---/pom.xml             maven的核心文件（maven项目必须有）
2、疑问： mvn compile 编译src/main目录下所有的java文件
        （1）、为什么下载：  maven工具执行的操作需要很多插件（java类--jar文件）完成的
        （2）、下载什么？   jar文件--叫做插件--插件是为了完成某些功能
        （3）、下载到什么地方：    默认仓库（本机仓库）C:\Users\汪凯\.m2\repository
        执行完 mvn compile，会在项目的根目录下生成 target 目录（结果目录）
        maven编译的Java程序，最后的class文件都在target目录中

        设置本机存放资源的目录位置（设置本机仓库）：
        1、修改maven的配置文件，maven安装目录/conf/settings.xml    先备份
        2、修改<localRepository> 指定你的目录（不要中文目录）
        D:\study\maven_work\maven_repository
3、仓库
        1、仓库是什么？仓库是存放东西的，存放maven使用的jar和我们项目使用的jar
            >maven使用的插件（各种jar）
            >项目使用的jar（第三方工具）
        2、仓库的分类
            >本机仓库：就是个人计算机上的文件夹，存放各种jar
            >中央仓库：在互联网上，使用网络才能使用的仓库
                ①：中央仓库：最权威的，所有开发人员都共享使用的一个集中的仓库，
                    中央仓库地址：https://repo.maven.apache.org
                ②：中央仓库的镜像：就是中央仓库的备份，在各个重大地方都有镜像
                ③：私服，在公司内部局域网中使用，不对外界使用
        3、仓库的使用：
                开发人员需要使用mysql驱动---->maven本机仓库---->私服---->镜像---->中央仓库
4、pom：项目对象模型，是一个pom.xml文件
        1、坐标：唯一值，在互联网中唯一标识一个项目的
                  <groupId>com.bjpowernode</groupId>
                  <artifactId>ch01-maven</artifactId>
                  <version>1.0-SNAPSHOT</version>

                  https://mvnrepository.com/      搜索使用中央仓库，使用groupId，artifactId作为搜索条件
        2、packaging：打包后压缩文件的扩展名，默认为jar，web应用为war
                    packaging可以不写，默认为jar
        3、依赖
            dependencies 和 dependency ，相当于是 java 中 import
            你的项目中要使用的各种资源说明，例如项目中使用mysql驱动：
            <dependencies>
                <dependency>
                    <groupId>mysql</groupId>
                    <artifactId>mysql-connector-java</artifactId>
                    <version>5.1.9</version>
                </dependency>
            </dependencies>
        4、properties 设置属性
            <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>1.8</maven.compiler.source>
                <maven.compiler.target>1.8</maven.compiler.target>
            </properties>
        5、build：maven在进行项目的构建时，配置信息，例如指定编译java代码使用的jdk的版本等等
5、maven生命周期、maven命令、maven的插件
        maven的生命周期：就是maven构建项目的过程，清理、编译、测试、报告、打包、安装、部署
        maven的命令：maven独立使用，通过命令，完成maven的生命周期的执行
                    maven可以使用命令，完成项目的清理、编译、测试等等
        maven的插件：maven命令执行时，真正完成功能的是插件，插件就是一些jar文件，一些类

        1）单元测试（测试方法）：用的是junit，junit是一个专门测试的框架（工具）
                             junit测试的内容：测试的是类中的方法，每一个都是独立测试的
                             方法是测试的基本单元（单位）
        2）使用步骤：
            1、加入依赖
            <!-- https://mvnrepository.com/artifact/junit/junit -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.11</version>
                <scope>test</scope>
            </dependency>
            2、在maven项目中src/test/java目录下，创建测试程序
                推荐的创建类和方法的提示：
                    1、测试类的名称是 Test+你要测试的类名
                    2、测试的方法名称：Test+方法名称
                    例如：测试HelloMaven
                        创建测试类HelloMaven
                        @Test
                        public void testAdd() {
                            测试HelloMaven的add方法是否正确
                        }
                    其中testAdd叫做测试方法，它的定义规则：
                        1、方法是public的，必须
                        2、方法没有返回值，必须
                        3、方法名称是自定义的，推荐：Test+方法名称
                        4、在方法的上面加上 @Test
            3、mvn compile
                编译main/java/目录下的java为class文件，同时把class拷贝到target/classes目录下下面
                                第三章
1、在idea中设置maven，让idea和maven结合使用
    idea中内置maven，但一般不使用内置，因为用内置修改maven配置不方便
    使用自己安装的maven，需要覆盖idea中默认的设置，让idea指定maven安装位置等信息

    配置的入口   ①：配置当前工程的设置，file--settings
                ②：配置以后新建工程的设置：file--settings
2、使用模块创建项目
    1、maven-archetype-quickstart：普通的Java项目
    2、maven-archetype-webapp：web工程
                                第四章
1、依赖范围，使用scope表示
    scope的值有 compile（每个步骤都有），test（测试），provided（主程序和测试有）  默认是compile
    maven构建项目：编译，测试，打包，安装，部署  （阶段）
                                第五章
1、maven常用操作
    maven的属性设置
        <properties></properties>
    maven的全局变量
        自定义属性，1、在<properties>通过自定义标签声明变量（标签名就是变量名）
                  2、在pom.xml文件中的其他位置，使用${标签名}来调用
        自定义全局变量一般是定义依赖的版本号，当你的项目中要使用多个相同的版本号，先使用全局变量定义，在使用
        ${}调用
    资源插件：
        <build>
            <resources>
                  <resource>
                    <directory>src/main/directory</directory>
                    <includes>
                      <include>**/*.properties</include>
                      <include>**/*.xml</include>
                    </includes>
                    //filtering选项false不启用过滤器，*.property已经起到过滤作用
                  </resource>
            </resources>
        </build>

        作用：mybaits课程会用到这个作用
        1、默认没有使用resources的时候，maven执行编译代码时，会把src/main/resources目录中的文件拷贝
            到target/classes目录中,对于src/java中的非java文件不处理，不拷贝
        2、程序有时需要把一些文件放在src/main/java目录中，当我执行java程序时，需要用到src/main/java目录中
            的文件，此时就需要在<build>中加入<resources>


